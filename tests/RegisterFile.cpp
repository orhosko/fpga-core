#include "VRegisterFile_tb.h" // Generated by Verilator from RegisterFile_tb.sv
#include "verilated.h"
#include <iostream>
#ifdef VM_TRACE
#include "verilated_vcd_c.h"
#endif

// Global simulation time (used by Verilator for $time)
vluint64_t main_time = 0;
double sc_time_stamp() { return main_time; }

int main(int argc, char **argv) {
  // Ensure that waveform tracing is enabled from time 0.
  Verilated::traceEverOn(true);

  // Pass command-line arguments so Verilator can parse any --trace options,
  // etc.
  Verilated::commandArgs(argc, argv);

  // Instantiate the top module (your testbench module)
  VRegisterFile_tb *top = new VRegisterFile_tb;

#ifdef VM_TRACE
  // Enable waveform dumping (optional)
  VerilatedVcdC *tfp = new VerilatedVcdC;
  top->trace(tfp, 99); // Trace 99 levels of hierarchy
  tfp->open("dump.vcd");
#endif

  // Simulati  on loop:
  // We will drive the clock manually.
  // Here we mimic a 10-time-unit period clock.
  const int sim_time_limit = 1000; // simulation time limit (in time units)
  while (!Verilated::gotFinish() && main_time < sim_time_limit) {
    // Toggle clock: For a 10-unit period, the clock is low for 5 units, then
    // high for 5 units.
    top->clk = (main_time % 10) < 5 ? 0 : 1;

    // Evaluate the model
    top->eval();
  }

#ifdef VM_TRACE
  // Dump the waveform data for the current time step
  tfp->dump(main_time);
#endif
  if (main_time % 100 == 0) {
    std::cout << "Simulation time: " << main_time << std::endl;
    // Advance simulation time
    main_time++;
  }

#ifdef VM_TRACE
  tfp->close();
#endif

  // Final model cleanup (calls final blocks in Verilog if any)
  top->final();
  delete top;
  return 0;
}
